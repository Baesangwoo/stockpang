@{
    ViewBag.Title = "Index";
}

<!-- Resources -->
<script src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
<script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>

<!-- Chart code -->


<!-- <img src="~/Content/image/StockPanf_Logo_PR.png" class="dark-logo" style="width:190px; height:65px" /> <br />  -->
<!-- <img src="~/Content/image/StockPanf_Logo_PD.png" class="dark-logo" style="width:190px; height:65px" /> <br />  -->

    <label>삼성전자 현재 주가 :</label>
    <label id="SS_VALUE">@ViewBag.Value</label>
    <br />
    <br />

    <table>  
        <tr><td><font color="blue" size="4"> << 스톡팡 투자 원칙 : 마음의 평온 >> </font></td></tr>
        <tr><td>     1. <font color="blue">욕심을 줄여라</font> : 년 목표 수익을 6%~10% 정도로 잡아야 위험한 거래를 하지 않는다. </td></tr>     
        <tr><td>     2. <font color="blue">좋은 종목을 골라라</font> : 망하지 않을 기업, 혁신을 만드는 기업. 섹터별로 2~3개 종목으로 총 10~15개 종목  </td></tr>    
        <tr><td>     3. <font color="blue">시장의 흐름을 타라</font> : 증시의 상단, 하단을 크게 설정하고 매수, 매도를 결정하라.  </td></tr>    
        <tr><td>     4. <font color="blue">현금을 비축하라</font> : 총 투자금액의 30% 내외의 현금을 유지하라. 폭락 시에도 웃는다. </td></tr>    
        <tr><td>     5. <font color="blue">천천히 사고 팔아라</font> : 20%씩 나누어서 사고, 30%씩 나누어서 팔아라. 증시는 내일도 열린다. </td></tr>    
        <tr><td>     그리고, <font color="red">소중한 돈을 잃지 마라.</font>  </td></tr>
        <tr><td> </td></tr>            
    </table>

    <b>
        <br />
        <br />
        코스피Graph &nbsp&nbsp&nbsp <br />
        <label>평균 코스피 지수(45일) :</label>  <label id="KOSPI_VALUE"> </label> &nbsp&nbsp&nbsp
        <label>코스피 지수 상단 :</label>  <label id="KOSPI_VALUE_H" style="color:red" > </label> &nbsp&nbsp&nbsp
        <label>코스피 지수 하단 :</label>  <label id="KOSPI_VALUE_L" style="color:blue"> </label> &nbsp&nbsp&nbsp

    </b>

    <div id="chartdiv"></div>

    <!-- Styles -->
    <style>
        #chartdiv {
            width: 100%;
            height: 400px;
        }
    </style>
    <br />
    <br />



    <script>
        setInterval(function () {
            $.ajax({
                type: "GET",
                url: "/Home/GetValue",
                data: {},
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    successFunc03(response);
                },
            });
            function successFunc03(jsondata) {
                var ss_value = document.getElementById("SS_VALUE");
                ss_value.innerHTML = jsondata;
            }
        }, 1000);
    </script>

<script>
    $(document).ready(function () {
        $.ajax({
            type: "GET",
            url: "/Home/AvgKospi/",
            data: {},
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                successFunc1(response);
            },
            error: function (error) {
                alert('Error!');
            }
        });

        function successFunc1(jsondata) {

            var kospi_value = document.getElementById("KOSPI_VALUE");
            var kospi_value_h = document.getElementById("KOSPI_VALUE_H");
            var kospi_value_l = document.getElementById("KOSPI_VALUE_L");

            var kospi_point = jsondata;


            kospi_value.innerHTML = Math.round(kospi_point);
            kospi_value_h.innerHTML = Math.round(jsondata*1.035);
            kospi_value_l.innerHTML = Math.round(jsondata-(jsondata*0.035));
        };


    });



</script>

<script>
        $(document).ready(function () {
            $.ajax({
                type: "GET",
                url: "/Home/GetChart/",
                data: {},
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    successFunc(response);
                },
                error: function (error) {
                    alert('Error!');
                }
            });
            function successFunc(jsondata) {

                var arry = jsondata;


                var arryDate = new Array();
                var arryPoint = new Array();
                var arryStart = new Array();
                var arryHigh = new Array();
                var arryLow = new Array();

                for (idx in arry) {
                    arryDate.push(arry[idx].INDEX_DATE);
                    //alert(arryDate);
                    arryPoint.push(arry[idx].INDEX_POINT);
                    //alert(arryPoint);
                    arryStart.push(arry[idx].INDEX_START);
                    //alert(arryStart);
                    arryHigh.push(arry[idx].INDEX_HIGH);
                    //alert(arryHigh);
                    arryLow.push(arry[idx].INDEX_LOW);
                    //alert(arryLow);
                }


                // Themes begin
                am4core.useTheme(am4themes_animated);
                // Themes end

                var chart = am4core.create("chartdiv", am4charts.XYChart);
                chart.paddingRight = 20;

                chart.dateFormatter.inputDateFormat = "yyyy-MM-dd";

                var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
                dateAxis.renderer.grid.template.location = 0;

                var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
                valueAxis.tooltip.disabled = true;

                var series = chart.series.push(new am4charts.CandlestickSeries());

                series.dropFromOpenState.properties.fill = am4core.color("blue");
                series.dropFromOpenState.properties.stroke = am4core.color("blue");
                series.riseFromOpenState.properties.fill = am4core.color("red");
                series.riseFromOpenState.properties.stroke = am4core.color("red");

                series.dataFields.dateX = "INDEX_DATE";
                series.dataFields.valueY = "INDEX_POINT";
                series.dataFields.openValueY = "INDEX_START";
                series.dataFields.lowValueY = "INDEX_LOW";
                series.dataFields.highValueY = "INDEX_HIGH";
                series.simplifiedProcessing = true;
                //series.tooltipText = "Open:{openValueY.value}\nLow:{lowValueY.value}\nHigh:{highValueY.value}\nClose:{valueY.value}";
                series.tooltipText = "Open:{openValueY.value}\nClose:{valueY.value}";

                chart.cursor = new am4charts.XYCursor();

                // a separate series for scrollbar
                var lineSeries = chart.series.push(new am4charts.LineSeries());
                lineSeries.dataFields.dateX = "INDEX_DATE";
                lineSeries.dataFields.valueY = "INDEX_START";
                // need to set on default state, as initially series is "show"
                lineSeries.defaultState.properties.visible = false;

                // hide from legend too (in case there is one)
                lineSeries.hiddenInLegend = true;
                lineSeries.fillOpacity = 0.5;
                lineSeries.strokeOpacity = 0.5;

                var scrollbarX = new am4charts.XYChartScrollbar();
                scrollbarX.series.push(lineSeries);
                chart.scrollbarX = scrollbarX;

                chart.data = jsondata;


                //var ctx = document.getElementById('Grape');

                //var chartOptions = {
                //    legend: {
                //        display: false
                //    }
                //};


                //var chart = new Chart(ctx, {
                //    // The type of chart we want to create
                //    type: 'line',

                //    // The data for our dataset
                //    data: {
                //        labels: arryLabel,
                //        datasets: [{
                //            label: "그래프",
                //            backgroundColor: 'rgb(255, 255, 255)',
                //            borderColor: 'rgb(255, 99, 132)',
                //            data: arryvalues
                //        }]
                //    },

                //    // Configuration options go here
                //    options: chartOptions
                //});
            }
        });
</script>